{
  // suggestions
  // "suggest.echodocSupport": true,
/* https://code.visualstudio.com/docs/editor/intellisense  reference for vscode symbols*/
/* https://www.nerdfonts.com/cheat-sheet  reference to find some other symbols*/
    /* some symbols you might like: פּ                  */
    /* fb44 this is the hex for nf-mdi-file_tree, should be good for class*/
  "suggest.completionItemKindLabels": {
    "method": "  ",
    "function": "  ",
    "variable": "[]",
    "field": "  ",
    "typeParameter": "<>",
    "constant": "  ",
    "class": "  ",
    "interface": " 蘒",
    "struct": "  ",
    "event": "  ",
    "operator": "  ",
    "module": "  ",
    "property": "  ",
    "enum": " 練",
    "reference": "  ",
    "keyword": "  ",
    "file": "  ",
    "folder": " ﱮ",
    "color": "  ",
    "unit": " 塞 ",
    "snippet": "  ",
    "text": "  ",
    "constructor": "  ",
    "value": "  ",
    "enumMember": "  ",
    "default": "  "
  },
  "snippets.priority": 1,
  //"yank.priority": 1,
  "suggest.languageSourcePriority": 99,
  "coc.source.file.priority": 2,
  "coc.source.around.priority": 3,
  "coc.source.buffer.priority": 4,

  // diagnostics
  "diagnostic.errorSign": " ",
  "diagnostic.warningSign": " ",
  "diagnostic.infoSign": "",
  "diagnostic.hintSign": " ",
  // "diagnostic.displayByAle": true,
  // "diagnostic.virtualText": true, // this won't work with codelens when error on same line

  // list
  "list.indicator": ">",
  "list.selectedSignText": " ",
  // explorer
  "explorer.width": 40,
  "explorer.file.root.template": "[icon] [git] [hidden & 1][root]",
  "explorer.icon.enableNerdfont": true,
  "explorer.previewAction.onHover": false,
  "explorer.icon.enableVimDevicons": false,
  "explorer.file.showHiddenFiles": false,
  "explorer.keyMappings.global": {
    "<cr>": ["expandable?", "expand", "open"],
    "v": "open:vsplit"
  },

 "diagnostic-languageserver.filetypes": {
  // lint `sh` (includes `bash`) files
  "sh": "shellcheck"
 },

 "diagnostic-languageserver.formatFiletypes": {
  // format `sh` (includes `bash`) files using formatter defined below
  "sh": "shfmt"
 },

 "diagnostic-languageserver.formatters": {
  // define our formatter so that we can reference it from
  // `diagnostic-languageserver.formatFiletypes`
  "shfmt": {
    "command": "shfmt",
    // all the below args are entirely optional
    // primarily listed here to call out that flags which take an
    // argument (such as `-i <num-spaces>` for specifying indentation)
    // should be split into two strings, the flag and then the value
    "args": ["-i", "2", "-bn", "-ci", "-sr"]
  }

 },
 "snippets.ultisnips.directories": [
 "UltiSnips",
 "gosnippets/UltiSnips"
 ],
 "go.goplsOptions": {
    "completeUnimported": true
 },

 "languageserver": {
  "golang": {
    "command": "go-langserver",
    "filetypes": ["go"],
    "initializationOptions": {
      "gocodeCompletionEnabled": true,
      "diagnosticsEnabled": true,
      "lintTool": "golint"
    }
  }
}

}
